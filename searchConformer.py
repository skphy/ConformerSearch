#taken from mstools/mstools/molecule ..

#!/usr/bin/env python
# -*- coding: utf-8 -*-
from typing import Dict, Iterator, List, Optional, Union, Literal, Tuple
import warnings
import random
from openbabel import openbabel
import openbabel.pybel as pybel
from .saved_mol2 import get_smiles_mol2_dict


class Molecule:
    """This class is used to create molecular 3D structure from SMILES.

    Parameters
    ----------
    smiles: str
        SMILES string of input molecule.
    algorithm: 'openbabel'
        The algorithm used to generate molecular 3D structure.
    read_saved: bool
        Set to True, if the molecule is saved in saved_mol2, then the structure in it will directly used.
    seed: int
        Random seed.
    """

    def __init__(self, smiles: str,
                 algorithm: Literal['openbabel'] = 'openbabel',
                 read_saved: bool = True,
                 seed: int = 0):
        self.smiles = smiles
        self.algorithm = algorithm
        self.read_saved = read_saved
        self.seed = seed

        if algorithm == 'openbabel':
            self.mol = self._mol_openbabel(minimize=True)
        elif algorithm == 'rdkit':
            # TODO
            pass
        else:
            raise RuntimeError(f'Unknown 3D coordinates generate algorithm {algorithm}')

    @property
    def charge(self) -> int:
        if self.algorithm == 'openbabel':
            return self.mol.charge

    @property
    def spin(self) -> int:
        if self.algorithm == 'openbabel':
            return self.mol.spin

    @property
    def n_atoms(self) -> int:
        if self.algorithm == 'openbabel':
            return len(self.mol.atoms)

    @property
    def molwt(self) -> float:
        if self.algorithm == 'openbabel':
            return self.mol.molwt

    @property
    def formula(self) -> str:
        if self.algorithm == 'openbabel':
            return self.mol.formula

    @property
    def smiles2mol2(self) -> Dict[str, str]:
        if not hasattr(self, '__smiles2mol2_dict'):
            self.__smiles2mol2_dict = get_smiles_mol2_dict()
        return self.__smiles2mol2_dict

    def write(self, file: str = None, filetype: Literal['pdb', 'mol2', 'xyz'] = 'mol2'):
        if self.algorithm == 'openbabel':
            mol = self.mol
            if file is not None:
                mol.write(filetype, file, overwrite=True)
            else:
                return mol.write(filetype)

    def _conformers_openbabel(self, n_select: int = 10, n_try: int = 10) -> List[pybel.Molecule]:
        """Generate a list of conformers using openbabel.

        Parameters
        ----------
        n_select: int
            The number of conformers to be returned.
        n_try
            The number of conformers try to generated by random noise to coordinates.
        Returns
        -------
        conformers: List[pybel.Molecule]
            A list consists of n_select pybel.Molecule objects.
        """
        if n_select == 0:
            return []
        random.seed(self.seed)
        ff = openbabel.OBForceField.FindForceField('mmff94')

        if n_try is None:
            n_try = n_select

        if n_try < n_select:
            warnings.warn(
                f'n_try={n_try} is set to be smaller than n_select={n_select}. '
                f'n_try is set to {n_select}')
            n_try = n_select

        x_list = []
        for atom in self.mol.atoms:
            for x in atom.coords:
                x_list.append(x)
        xmin, xmax = min(x_list), max(x_list)
        xspan = xmax - xmin

        conformers = []
        for i in range(n_try):
            conformer = self._mol_openbabel(minimize=False)

            for atom in conformer.atoms:
                obatom = atom.OBAtom
                random_coord = [(random.random() * xspan + xmin) * k for k in [2, 1, 0.5]]
                obatom.SetVector(*random_coord)

            conformer.localopt()
            ff.Setup(conformer.OBMol)
            conformer.OBMol.SetEnergy(ff.Energy())
            conformers.append(conformer)
        conformers.sort(key=lambda x: x.energy)
        return conformers[:n_select]

    def _mol_openbabel(self, minimize: bool = False) -> pybel.Molecule:
        """Generate a openbabel conformer.

        Parameters
        ----------
        minimize: bool
            If True, the molecular coordinates will be optimized using classical force field.
        Returns
        -------
        mol: pybel.Molecule
            A pybel.Molecule object.
        """
        try:
            mol = pybel.readstring('smi', self.smiles)
        except:
            raise RuntimeError('Cannot create molecule from SMILES using openbabel.')

        if self.read_saved and self.smiles in self.smiles2mol2:
            mol = next(pybel.readfile('mol2', self.smiles2mol2[self.smiles]))
        else:
            mol.addh()
            mol.make3D()
            if minimize:
                mol.localopt()
        return mol
